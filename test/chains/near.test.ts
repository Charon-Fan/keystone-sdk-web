import KeystoneSDK from '../../src'
import { type NearSignature } from '../../src/types/signature'
import { UR } from '../../src/types/ur'
import { toBuffer } from '../../src/utils'

test('parseSignature', () => {
  const keystoneSDK = new KeystoneSDK()

  const type = 'near-signature'
  const cborHex = 'a201d825509b1deb4d3b7d4bad9bdd2b0d7b3dcb6d0281584085c578f8ca68bf8d771f0346ed68c4170df9ee9878cb76f3e2fac425c3f5793d36a741547e245c6c7ac1b9433ad5fc523d41152cac2a3726cbe134e0a0366802'
  const expectResult: NearSignature = {
    signature: ['85c578f8ca68bf8d771f0346ed68c4170df9ee9878cb76f3e2fac425c3f5793d36a741547e245c6c7ac1b9433ad5fc523d41152cac2a3726cbe134e0a0366802'],
    requestId: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
  }

  expect(keystoneSDK.near.parseSignature(new UR(toBuffer(cborHex), type))).toStrictEqual(expectResult)
})

test('generateSignRequest', () => {
  const keystoneSDK = new KeystoneSDK()

  const requestId = '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
  const signData = ['4000000039666363303732306130313664336331653834396438366231366437313339653034336566633438616464316337386633396333643266303065653938633037009FCC0720A016D3C1E849D86B16D7139E043EFC48ADD1C78F39C3D2F00EE98C07823E0CA1957100004000000039666363303732306130313664336331653834396438366231366437313339653034336566633438616464316337386633396333643266303065653938633037F0787E1CB1C22A1C63C24A37E4C6C656DD3CB049E6B7C17F75D01F0859EFB7D80100000003000000A1EDCCCE1BC2D3000000000000']
  const path = "m/44'/397'/0'"
  const xfp = 'F23F9FD2'
  const account = ''
  const origin = 'nearwallet'

  const type = 'near-sign-request'
  const cborHex = 'a401d825509b1deb4d3b7d4bad9bdd2b0d7b3dcb6d028158e64000000039666363303732306130313664336331653834396438366231366437313339653034336566633438616464316337386633396333643266303065653938633037009fcc0720a016d3c1e849d86b16d7139e043efc48add1c78f39c3d2f00ee98c07823e0ca1957100004000000039666363303732306130313664336331653834396438366231366437313339653034336566633438616464316337386633396333643266303065653938633037f0787e1cb1c22a1c63c24a37e4c6c656dd3cb049e6b7c17f75d01f0859efb7d80100000003000000a1edccce1bc2d300000000000003d90130a20186182cf519018df500f5021af23f9fd2056a6e65617277616c6c6574'
  const expectResult = new UR(toBuffer(cborHex), type)

  expect(keystoneSDK.near.generateSignRequest({ requestId, signData, path, xfp, account, origin })).toStrictEqual(expectResult)
})
