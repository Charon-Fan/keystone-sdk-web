// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protos/verify_address.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protoc.VerifyAddress
 */
export class VerifyAddress extends Message<VerifyAddress> {
  /**
   * @generated from field: int32 coinType = 1;
   */
  coinType = 0;

  /**
   * @generated from field: int32 addressIndex = 2;
   */
  addressIndex = 0;

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  constructor(data?: PartialMessage<VerifyAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.VerifyAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinType", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "addressIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyAddress {
    return new VerifyAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyAddress {
    return new VerifyAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyAddress {
    return new VerifyAddress().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyAddress | PlainMessage<VerifyAddress> | undefined, b: VerifyAddress | PlainMessage<VerifyAddress> | undefined): boolean {
    return proto3.util.equals(VerifyAddress, a, b);
  }
}

