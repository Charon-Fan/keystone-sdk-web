// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protos/message.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protoc.SignMessage
 */
export class SignMessage extends Message<SignMessage> {
  /**
   * @generated from field: string coinCode = 1;
   */
  coinCode = "";

  /**
   * @generated from field: string hdPath = 2;
   */
  hdPath = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<SignMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.SignMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hdPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignMessage {
    return new SignMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignMessage {
    return new SignMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignMessage {
    return new SignMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SignMessage | PlainMessage<SignMessage> | undefined, b: SignMessage | PlainMessage<SignMessage> | undefined): boolean {
    return proto3.util.equals(SignMessage, a, b);
  }
}

