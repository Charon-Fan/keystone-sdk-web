// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protos/sync.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protoc.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: string hdPath = 1;
   */
  hdPath = "";

  /**
   * @generated from field: string xPub = 2;
   */
  xPub = "";

  /**
   * @generated from field: int32 addressLength = 3;
   */
  addressLength = 0;

  /**
   * @generated from field: bool isMultiSign = 4;
   */
  isMultiSign = false;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hdPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "xPub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addressLength", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "isMultiSign", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message protoc.Coin
 */
export class Coin extends Message<Coin> {
  /**
   * @generated from field: string coinCode = 1;
   */
  coinCode = "";

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  /**
   * @generated from field: repeated protoc.Account accounts = 3;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<Coin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Coin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coin {
    return new Coin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJsonString(jsonString, options);
  }

  static equals(a: Coin | PlainMessage<Coin> | undefined, b: Coin | PlainMessage<Coin> | undefined): boolean {
    return proto3.util.equals(Coin, a, b);
  }
}

/**
 * @generated from message protoc.Sync
 */
export class Sync extends Message<Sync> {
  /**
   * @generated from field: repeated protoc.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<Sync>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Sync";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sync {
    return new Sync().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sync {
    return new Sync().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sync {
    return new Sync().fromJsonString(jsonString, options);
  }

  static equals(a: Sync | PlainMessage<Sync> | undefined, b: Sync | PlainMessage<Sync> | undefined): boolean {
    return proto3.util.equals(Sync, a, b);
  }
}

